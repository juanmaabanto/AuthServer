// <auto-generated />
using System;
using Expertec.Sigeco.AuthServer.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Expertec.Sigeco.AuthServer.API.Migrations
{
    [DbContext(typeof(AuthContext))]
    [Migration("20200719154954_TamanioColumnDetalleOpc")]
    partial class TamanioColumnDetalleOpc
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.AplicacionCliente", b =>
                {
                    b.Property<string>("AplicacionClienteId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<bool>("EsTercero")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrigenPermitido")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RedirigirUri")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Secreto")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("TiempoVidaTokenActualizacion")
                        .HasColumnType("int");

                    b.Property<int>("TipoAplicacion")
                        .HasColumnType("int");

                    b.HasKey("AplicacionClienteId");

                    b.ToTable("AplicacionCliente","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.Autorizacion", b =>
                {
                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("OpcionId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime");

                    b.Property<string>("UsuarioModificacion")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UsuarioRegistro")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("EmpresaId", "OpcionId", "UsuarioId");

                    b.HasIndex("OpcionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Autorizacion","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.DetalleAutorizacion", b =>
                {
                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("OpcionId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("DetalleOpcionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime");

                    b.Property<string>("UsuarioModificacion")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UsuarioRegistro")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("EmpresaId", "OpcionId", "UsuarioId", "DetalleOpcionId");

                    b.HasIndex("DetalleOpcionId");

                    b.ToTable("DetalleAutorizacion","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.DetalleEspacioTrabajo", b =>
                {
                    b.Property<int>("DetalleEspacioTrabajoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("EspacioTrabajoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<int>("ModuloId")
                        .HasColumnType("int");

                    b.HasKey("DetalleEspacioTrabajoId");

                    b.HasIndex("EspacioTrabajoId");

                    b.HasIndex("ModuloId");

                    b.ToTable("DetalleEspacioTrabajo","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.DetalleOpcion", b =>
                {
                    b.Property<int>("DetalleOpcionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreAccion")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreControlador")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OpcionId")
                        .HasColumnType("int");

                    b.HasKey("DetalleOpcionId");

                    b.HasIndex("OpcionId");

                    b.ToTable("DetalleOpcion","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.Empresa", b =>
                {
                    b.Property<int>("EmpresaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<bool>("Anulado")
                        .HasColumnType("bit");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CuentaDetraccion")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("DomicilioFiscal")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("EspacioTrabajoId")
                        .HasColumnType("int");

                    b.Property<bool>("ExoneradoIGV")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime");

                    b.Property<string>("ImagenUri")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IncluyeIGV")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreComercial")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ruc")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Ubigeo")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UsuarioModificacion")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UsuarioRegistro")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("EmpresaId");

                    b.HasIndex("EspacioTrabajoId");

                    b.ToTable("Empresa","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.EspacioTrabajo", b =>
                {
                    b.Property<int>("EspacioTrabajoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Dominio")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TipoEspacioTrabajoId")
                        .HasColumnType("int");

                    b.HasKey("EspacioTrabajoId");

                    b.HasIndex("TipoEspacioTrabajoId");

                    b.ToTable("EspacioTrabajo","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.Favorito", b =>
                {
                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("OpcionId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.HasKey("EmpresaId", "OpcionId", "UsuarioId");

                    b.HasIndex("OpcionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Favorito","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.HistoricoClave", b =>
                {
                    b.Property<int>("HistoricoClaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("HistoricoClaveId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("HistoricoClave","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.Modulo", b =>
                {
                    b.Property<int>("ModuloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("AplicacionClienteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NombreCorto")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NombreHost")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NombreRuta")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UriRuta")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UsuarioRegistro")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("ModuloId");

                    b.HasIndex("AplicacionClienteId");

                    b.ToTable("Modulo","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.ModuloRecurso", b =>
                {
                    b.Property<int>("ModuloId")
                        .HasColumnType("int");

                    b.Property<int>("RecursoId")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.HasKey("ModuloId", "RecursoId");

                    b.HasIndex("RecursoId");

                    b.ToTable("ModuloRecurso","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.Opcion", b =>
                {
                    b.Property<int>("OpcionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime");

                    b.Property<bool>("Formulario")
                        .HasColumnType("bit");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("ModuloId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("PadreId")
                        .HasColumnType("int");

                    b.Property<bool>("Reactivo")
                        .HasColumnType("bit");

                    b.Property<string>("Ruta")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Secuencia")
                        .HasColumnType("int");

                    b.Property<string>("Tooltip")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ViewClass")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ViewType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("OpcionId");

                    b.HasIndex("ModuloId");

                    b.HasIndex("PadreId");

                    b.ToTable("Opcion","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.Persona", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NroDocumento")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PrimerNombre")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("SegundoNombre")
                        .HasColumnType("varchar(30)");

                    b.HasKey("PersonaId");

                    b.ToTable("Persona","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.Recurso", b =>
                {
                    b.Property<int>("RecursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NombreHost")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("UriHost")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("RecursoId");

                    b.ToTable("Recurso","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.TipoEspacioTrabajo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("TipoEspacioTrabajoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("Nombre")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("TipoEspacioTrabajo","seguridad");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "production"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "test"
                        });
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.TokenActualizacion", b =>
                {
                    b.Property<string>("TokenActualizacionId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("AplicacionClienteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("TicketProtegido")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("TokenActualizacionId");

                    b.HasIndex("AplicacionClienteId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TokenActualizacion","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("UsuarioId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("CuentaAccesoFallido")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnName("SelloConcurrencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnName("Correo")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("CorreoConfirmado")
                        .HasColumnType("bit");

                    b.Property<int>("EspacioTrabajoId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExpiraClave")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("ExpiraClaveHabilitado")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Imagen")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("BloqueoHabilitado")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("FinBloqueo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("CorreoNormalizado")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnName("NombreUsuarioNormalizado")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("TelefonoConfirmado")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiereCambioClave")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("SelloSeguridad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("DobleFactorHabilitado")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("NombreUsuario")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EspacioTrabajoId");

                    b.HasIndex("PersonaId");

                    b.ToTable("Usuario","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.UsuarioAplicacionCliente", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("AplicacionClienteId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<bool>("Permitido")
                        .HasColumnType("bit");

                    b.Property<bool>("TieneAcceso")
                        .HasColumnType("bit");

                    b.HasKey("UsuarioId", "AplicacionClienteId");

                    b.HasIndex("AplicacionClienteId");

                    b.ToTable("UsuarioAplicacionCliente","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.UsuarioEmpresa", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.HasKey("UsuarioId", "EmpresaId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("UsuarioEmpresa","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.UsuarioRol", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("UsuarioId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("RoleId")
                        .HasColumnName("RolId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsuarioRol","seguridad");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("RolId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnName("SelloConcurrencia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Nombre")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnName("NombreNormalizado")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Rol","seguridad");

                    b.HasData(
                        new
                        {
                            Id = "884215f8-8450-4914-9a3e-7769f01e8f85",
                            ConcurrencyStamp = "63a189b6-ade6-49e8-90d7-c6a9f5208fea",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "9c871375-b636-444e-b75c-0250dd97b64d",
                            ConcurrencyStamp = "683c4774-db22-45fe-b102-ba1bd405c637",
                            Name = "Usuario",
                            NormalizedName = "USUARIO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UsuarioReclamacionId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnName("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnName("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UsuarioId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsuarioReclamacion","seguridad");
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.Autorizacion", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Opcion", "Opcion")
                        .WithMany()
                        .HasForeignKey("OpcionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.DetalleAutorizacion", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.DetalleOpcion", "DetalleOpcion")
                        .WithMany()
                        .HasForeignKey("DetalleOpcionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Autorizacion", null)
                        .WithMany("Detalles")
                        .HasForeignKey("EmpresaId", "OpcionId", "UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.DetalleEspacioTrabajo", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.EspacioTrabajo", "EspacioTrabajo")
                        .WithMany()
                        .HasForeignKey("EspacioTrabajoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Modulo", "Modulo")
                        .WithMany()
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.DetalleOpcion", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Opcion", null)
                        .WithMany("Detalles")
                        .HasForeignKey("OpcionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.Empresa", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.EspacioTrabajo", "EspacioTrabajo")
                        .WithMany()
                        .HasForeignKey("EspacioTrabajoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.EspacioTrabajo", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.TipoEspacioTrabajo", "TipoEspacioTrabajo")
                        .WithMany()
                        .HasForeignKey("TipoEspacioTrabajoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.Favorito", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Opcion", "Opcion")
                        .WithMany()
                        .HasForeignKey("OpcionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.HistoricoClave", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.Modulo", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.AplicacionCliente", "AplicacionCliente")
                        .WithMany()
                        .HasForeignKey("AplicacionClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.ModuloRecurso", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Modulo", "Modulo")
                        .WithMany()
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Recurso", "Recurso")
                        .WithMany()
                        .HasForeignKey("RecursoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.Opcion", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Modulo", null)
                        .WithMany("Opciones")
                        .HasForeignKey("ModuloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Opcion", "Padre")
                        .WithMany()
                        .HasForeignKey("PadreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.TokenActualizacion", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.AplicacionCliente", "AplicacionCliente")
                        .WithMany()
                        .HasForeignKey("AplicacionClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.Usuario", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.EspacioTrabajo", "EspacioTrabajo")
                        .WithMany()
                        .HasForeignKey("EspacioTrabajoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.UsuarioAplicacionCliente", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.AplicacionCliente", "AplicacionCliente")
                        .WithMany()
                        .HasForeignKey("AplicacionClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.UsuarioEmpresa", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Usuario", null)
                        .WithMany("Empresas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Expertec.Sigeco.AuthServer.API.Models.UsuarioRol", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Rol")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Usuario", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Expertec.Sigeco.AuthServer.API.Models.Usuario", null)
                        .WithMany("Reclamaciones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
